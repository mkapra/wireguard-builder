# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.allowed_ip import AllowedIp
from openapi_server.models.dns_server import DnsServer
from openapi_server.models.keypair import Keypair
from openapi_server.models.vpn_ip import VpnIp
import re
from openapi_server import util

from openapi_server.models.allowed_ip import AllowedIp  # noqa: E501
from openapi_server.models.dns_server import DnsServer  # noqa: E501
from openapi_server.models.keypair import Keypair  # noqa: E501
from openapi_server.models.vpn_ip import VpnIp  # noqa: E501
import re  # noqa: E501

class Client(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, description=None, keepalive=30, dns_server=None, keypair=None, vpn_ip=None, allowed_ips=None):  # noqa: E501
        """Client - a model defined in OpenAPI

        :param id: The id of this Client.  # noqa: E501
        :type id: int
        :param name: The name of this Client.  # noqa: E501
        :type name: str
        :param description: The description of this Client.  # noqa: E501
        :type description: str
        :param keepalive: The keepalive of this Client.  # noqa: E501
        :type keepalive: int
        :param dns_server: The dns_server of this Client.  # noqa: E501
        :type dns_server: DnsServer
        :param keypair: The keypair of this Client.  # noqa: E501
        :type keypair: Keypair
        :param vpn_ip: The vpn_ip of this Client.  # noqa: E501
        :type vpn_ip: VpnIp
        :param allowed_ips: The allowed_ips of this Client.  # noqa: E501
        :type allowed_ips: List[AllowedIp]
        """
        self.openapi_types = {
            'id': int,
            'name': str,
            'description': str,
            'keepalive': int,
            'dns_server': DnsServer,
            'keypair': Keypair,
            'vpn_ip': VpnIp,
            'allowed_ips': List[AllowedIp]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'description': 'description',
            'keepalive': 'keepalive',
            'dns_server': 'dnsServer',
            'keypair': 'keypair',
            'vpn_ip': 'vpnIp',
            'allowed_ips': 'allowedIps'
        }

        self._id = id
        self._name = name
        self._description = description
        self._keepalive = keepalive
        self._dns_server = dns_server
        self._keypair = keypair
        self._vpn_ip = vpn_ip
        self._allowed_ips = allowed_ips

    @classmethod
    def from_dict(cls, dikt) -> 'Client':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Client of this Client.  # noqa: E501
        :rtype: Client
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Client.


        :return: The id of this Client.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Client.


        :param id: The id of this Client.
        :type id: int
        """
        if id is not None and id > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if id is not None and id < 0:  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Client.

        A unique name for the client  # noqa: E501

        :return: The name of this Client.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Client.

        A unique name for the client  # noqa: E501

        :param name: The name of this Client.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")  # noqa: E501
        if name is not None and not re.search(r'^[a-zA-Z0-9_\-\s]*$', name):  # noqa: E501
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[a-zA-Z0-9_\-\s]*$/`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this Client.

        A more detailed optional description for the VPN Client  # noqa: E501

        :return: The description of this Client.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Client.

        A more detailed optional description for the VPN Client  # noqa: E501

        :param description: The description of this Client.
        :type description: str
        """
        if description is not None and len(description) > 255:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")  # noqa: E501
        if description is not None and not re.search(r'^[a-zA-Z0-9_\-\s]*$', description):  # noqa: E501
            raise ValueError("Invalid value for `description`, must be a follow pattern or equal to `/^[a-zA-Z0-9_\-\s]*$/`")  # noqa: E501

        self._description = description

    @property
    def keepalive(self):
        """Gets the keepalive of this Client.

        The keepalive value controls who often a client requests a handshake with the VPN server   # noqa: E501

        :return: The keepalive of this Client.
        :rtype: int
        """
        return self._keepalive

    @keepalive.setter
    def keepalive(self, keepalive):
        """Sets the keepalive of this Client.

        The keepalive value controls who often a client requests a handshake with the VPN server   # noqa: E501

        :param keepalive: The keepalive of this Client.
        :type keepalive: int
        """
        if keepalive is not None and keepalive > 3600:  # noqa: E501
            raise ValueError("Invalid value for `keepalive`, must be a value less than or equal to `3600`")  # noqa: E501
        if keepalive is not None and keepalive < 1:  # noqa: E501
            raise ValueError("Invalid value for `keepalive`, must be a value greater than or equal to `1`")  # noqa: E501

        self._keepalive = keepalive

    @property
    def dns_server(self):
        """Gets the dns_server of this Client.


        :return: The dns_server of this Client.
        :rtype: DnsServer
        """
        return self._dns_server

    @dns_server.setter
    def dns_server(self, dns_server):
        """Sets the dns_server of this Client.


        :param dns_server: The dns_server of this Client.
        :type dns_server: DnsServer
        """

        self._dns_server = dns_server

    @property
    def keypair(self):
        """Gets the keypair of this Client.


        :return: The keypair of this Client.
        :rtype: Keypair
        """
        return self._keypair

    @keypair.setter
    def keypair(self, keypair):
        """Sets the keypair of this Client.


        :param keypair: The keypair of this Client.
        :type keypair: Keypair
        """
        if keypair is None:
            raise ValueError("Invalid value for `keypair`, must not be `None`")  # noqa: E501

        self._keypair = keypair

    @property
    def vpn_ip(self):
        """Gets the vpn_ip of this Client.


        :return: The vpn_ip of this Client.
        :rtype: VpnIp
        """
        return self._vpn_ip

    @vpn_ip.setter
    def vpn_ip(self, vpn_ip):
        """Sets the vpn_ip of this Client.


        :param vpn_ip: The vpn_ip of this Client.
        :type vpn_ip: VpnIp
        """
        if vpn_ip is None:
            raise ValueError("Invalid value for `vpn_ip`, must not be `None`")  # noqa: E501

        self._vpn_ip = vpn_ip

    @property
    def allowed_ips(self):
        """Gets the allowed_ips of this Client.


        :return: The allowed_ips of this Client.
        :rtype: List[AllowedIp]
        """
        return self._allowed_ips

    @allowed_ips.setter
    def allowed_ips(self, allowed_ips):
        """Sets the allowed_ips of this Client.


        :param allowed_ips: The allowed_ips of this Client.
        :type allowed_ips: List[AllowedIp]
        """
        if allowed_ips is None:
            raise ValueError("Invalid value for `allowed_ips`, must not be `None`")  # noqa: E501
        if allowed_ips is not None and len(allowed_ips) > 5000:
            raise ValueError("Invalid value for `allowed_ips`, number of items must be less than or equal to `5000`")  # noqa: E501

        self._allowed_ips = allowed_ips
