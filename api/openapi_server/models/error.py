# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
import re
from openapi_server import util

import re  # noqa: E501

class Error(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status=None, type=None, message=None):  # noqa: E501
        """Error - a model defined in OpenAPI

        :param status: The status of this Error.  # noqa: E501
        :type status: int
        :param type: The type of this Error.  # noqa: E501
        :type type: str
        :param message: The message of this Error.  # noqa: E501
        :type message: str
        """
        self.openapi_types = {
            'status': int,
            'type': str,
            'message': str
        }

        self.attribute_map = {
            'status': 'status',
            'type': 'type',
            'message': 'message'
        }

        self._status = status
        self._type = type
        self._message = message

    @classmethod
    def from_dict(cls, dikt) -> 'Error':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Error of this Error.  # noqa: E501
        :rtype: Error
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self):
        """Gets the status of this Error.


        :return: The status of this Error.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Error.


        :param status: The status of this Error.
        :type status: int
        """
        if status is not None and status > 600:  # noqa: E501
            raise ValueError("Invalid value for `status`, must be a value less than or equal to `600`")  # noqa: E501
        if status is not None and status < 100:  # noqa: E501
            raise ValueError("Invalid value for `status`, must be a value greater than or equal to `100`")  # noqa: E501

        self._status = status

    @property
    def type(self):
        """Gets the type of this Error.


        :return: The type of this Error.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Error.


        :param type: The type of this Error.
        :type type: str
        """
        if type is not None and len(type) > 255:
            raise ValueError("Invalid value for `type`, length must be less than or equal to `255`")  # noqa: E501
        if type is not None and not re.search(r'^[a-zA-Z0-9_\-\s]*$', type):  # noqa: E501
            raise ValueError("Invalid value for `type`, must be a follow pattern or equal to `/^[a-zA-Z0-9_\-\s]*$/`")  # noqa: E501

        self._type = type

    @property
    def message(self):
        """Gets the message of this Error.


        :return: The message of this Error.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Error.


        :param message: The message of this Error.
        :type message: str
        """
        if message is not None and len(message) > 500:
            raise ValueError("Invalid value for `message`, length must be less than or equal to `500`")  # noqa: E501
        if message is not None and not re.search(r'^[a-zA-Z0-9_\-\s]*$', message):  # noqa: E501
            raise ValueError("Invalid value for `message`, must be a follow pattern or equal to `/^[a-zA-Z0-9_\-\s]*$/`")  # noqa: E501

        self._message = message
