# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
import re
from openapi_server import util

import re  # noqa: E501

class Keypair(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, priv_key=None, pub_key=None):  # noqa: E501
        """Keypair - a model defined in OpenAPI

        :param id: The id of this Keypair.  # noqa: E501
        :type id: int
        :param name: The name of this Keypair.  # noqa: E501
        :type name: str
        :param priv_key: The priv_key of this Keypair.  # noqa: E501
        :type priv_key: str
        :param pub_key: The pub_key of this Keypair.  # noqa: E501
        :type pub_key: str
        """
        self.openapi_types = {
            'id': int,
            'name': str,
            'priv_key': str,
            'pub_key': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'priv_key': 'privKey',
            'pub_key': 'pubKey'
        }

        self._id = id
        self._name = name
        self._priv_key = priv_key
        self._pub_key = pub_key

    @classmethod
    def from_dict(cls, dikt) -> 'Keypair':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Keypair of this Keypair.  # noqa: E501
        :rtype: Keypair
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Keypair.


        :return: The id of this Keypair.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Keypair.


        :param id: The id of this Keypair.
        :type id: int
        """
        if id is not None and id > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if id is not None and id < 0:  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Keypair.

        A unique name for the keypair  # noqa: E501

        :return: The name of this Keypair.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Keypair.

        A unique name for the keypair  # noqa: E501

        :param name: The name of this Keypair.
        :type name: str
        """
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")  # noqa: E501
        if name is not None and not re.search(r'^[a-zA-Z0-9_\-\s]*$', name):  # noqa: E501
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[a-zA-Z0-9_\-\s]*$/`")  # noqa: E501

        self._name = name

    @property
    def priv_key(self):
        """Gets the priv_key of this Keypair.

        The private key  # noqa: E501

        :return: The priv_key of this Keypair.
        :rtype: str
        """
        return self._priv_key

    @priv_key.setter
    def priv_key(self, priv_key):
        """Sets the priv_key of this Keypair.

        The private key  # noqa: E501

        :param priv_key: The priv_key of this Keypair.
        :type priv_key: str
        """
        if priv_key is not None and len(priv_key) > 255:
            raise ValueError("Invalid value for `priv_key`, length must be less than or equal to `255`")  # noqa: E501
        if priv_key is not None and not re.search(r'^[a-zA-Z0-9_\/+]*=', priv_key):  # noqa: E501
            raise ValueError("Invalid value for `priv_key`, must be a follow pattern or equal to `/^[a-zA-Z0-9_\/+]*=/`")  # noqa: E501

        self._priv_key = priv_key

    @property
    def pub_key(self):
        """Gets the pub_key of this Keypair.

        The public key  # noqa: E501

        :return: The pub_key of this Keypair.
        :rtype: str
        """
        return self._pub_key

    @pub_key.setter
    def pub_key(self, pub_key):
        """Sets the pub_key of this Keypair.

        The public key  # noqa: E501

        :param pub_key: The pub_key of this Keypair.
        :type pub_key: str
        """
        if pub_key is not None and len(pub_key) > 255:
            raise ValueError("Invalid value for `pub_key`, length must be less than or equal to `255`")  # noqa: E501
        if pub_key is not None and not re.search(r'^[a-zA-Z0-9_\/+]*=', pub_key):  # noqa: E501
            raise ValueError("Invalid value for `pub_key`, must be a follow pattern or equal to `/^[a-zA-Z0-9_\/+]*=/`")  # noqa: E501

        self._pub_key = pub_key
