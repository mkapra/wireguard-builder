# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.keypair import Keypair
from openapi_server.models.vpn_net import VpnNet
import re
from openapi_server import util

from openapi_server.models.keypair import Keypair  # noqa: E501
from openapi_server.models.vpn_net import VpnNet  # noqa: E501
import re  # noqa: E501

class Server(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, description=None, forward_interface=None, vpn_net=None, keypair=None):  # noqa: E501
        """Server - a model defined in OpenAPI

        :param id: The id of this Server.  # noqa: E501
        :type id: int
        :param name: The name of this Server.  # noqa: E501
        :type name: str
        :param description: The description of this Server.  # noqa: E501
        :type description: str
        :param forward_interface: The forward_interface of this Server.  # noqa: E501
        :type forward_interface: str
        :param vpn_net: The vpn_net of this Server.  # noqa: E501
        :type vpn_net: VpnNet
        :param keypair: The keypair of this Server.  # noqa: E501
        :type keypair: Keypair
        """
        self.openapi_types = {
            'id': int,
            'name': str,
            'description': str,
            'forward_interface': str,
            'vpn_net': VpnNet,
            'keypair': Keypair
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'description': 'description',
            'forward_interface': 'forwardInterface',
            'vpn_net': 'vpnNet',
            'keypair': 'keypair'
        }

        self._id = id
        self._name = name
        self._description = description
        self._forward_interface = forward_interface
        self._vpn_net = vpn_net
        self._keypair = keypair

    @classmethod
    def from_dict(cls, dikt) -> 'Server':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Server of this Server.  # noqa: E501
        :rtype: Server
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Server.


        :return: The id of this Server.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Server.


        :param id: The id of this Server.
        :type id: int
        """
        if id is not None and id > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if id is not None and id < 0:  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Server.

        A unique name for the VPN server  # noqa: E501

        :return: The name of this Server.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Server.

        A unique name for the VPN server  # noqa: E501

        :param name: The name of this Server.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")  # noqa: E501
        if name is not None and not re.search(r'^[a-zA-Z0-9_\-\s]*$', name):  # noqa: E501
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[a-zA-Z0-9_\-\s]*$/`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this Server.

        A more detailed optional description for the VPN Server  # noqa: E501

        :return: The description of this Server.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Server.

        A more detailed optional description for the VPN Server  # noqa: E501

        :param description: The description of this Server.
        :type description: str
        """
        if description is not None and len(description) > 255:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")  # noqa: E501
        if description is not None and not re.search(r'^[a-zA-Z0-9_\-\s]*$', description):  # noqa: E501
            raise ValueError("Invalid value for `description`, must be a follow pattern or equal to `/^[a-zA-Z0-9_\-\s]*$/`")  # noqa: E501

        self._description = description

    @property
    def forward_interface(self):
        """Gets the forward_interface of this Server.

        If this value is set, all trafic that should be routed to external will get routed over the given interface   # noqa: E501

        :return: The forward_interface of this Server.
        :rtype: str
        """
        return self._forward_interface

    @forward_interface.setter
    def forward_interface(self, forward_interface):
        """Sets the forward_interface of this Server.

        If this value is set, all trafic that should be routed to external will get routed over the given interface   # noqa: E501

        :param forward_interface: The forward_interface of this Server.
        :type forward_interface: str
        """
        if forward_interface is not None and len(forward_interface) > 13:
            raise ValueError("Invalid value for `forward_interface`, length must be less than or equal to `13`")  # noqa: E501
        if forward_interface is not None and not re.search(r'^[a-zA-Z]*[0-9]*$', forward_interface):  # noqa: E501
            raise ValueError("Invalid value for `forward_interface`, must be a follow pattern or equal to `/^[a-zA-Z]*[0-9]*$/`")  # noqa: E501

        self._forward_interface = forward_interface

    @property
    def vpn_net(self):
        """Gets the vpn_net of this Server.


        :return: The vpn_net of this Server.
        :rtype: VpnNet
        """
        return self._vpn_net

    @vpn_net.setter
    def vpn_net(self, vpn_net):
        """Sets the vpn_net of this Server.


        :param vpn_net: The vpn_net of this Server.
        :type vpn_net: VpnNet
        """
        if vpn_net is None:
            raise ValueError("Invalid value for `vpn_net`, must not be `None`")  # noqa: E501

        self._vpn_net = vpn_net

    @property
    def keypair(self):
        """Gets the keypair of this Server.


        :return: The keypair of this Server.
        :rtype: Keypair
        """
        return self._keypair

    @keypair.setter
    def keypair(self, keypair):
        """Sets the keypair of this Server.


        :param keypair: The keypair of this Server.
        :type keypair: Keypair
        """
        if keypair is None:
            raise ValueError("Invalid value for `keypair`, must not be `None`")  # noqa: E501

        self._keypair = keypair
