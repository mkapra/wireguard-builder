# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.vpn_net import VpnNet
import re
from openapi_server import util

from openapi_server.models.vpn_net import VpnNet  # noqa: E501
import re  # noqa: E501

class VpnIp(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address=None, vpn_net=None):  # noqa: E501
        """VpnIp - a model defined in OpenAPI

        :param address: The address of this VpnIp.  # noqa: E501
        :type address: str
        :param vpn_net: The vpn_net of this VpnIp.  # noqa: E501
        :type vpn_net: VpnNet
        """
        self.openapi_types = {
            'address': str,
            'vpn_net': VpnNet
        }

        self.attribute_map = {
            'address': 'address',
            'vpn_net': 'vpnNet'
        }

        self._address = address
        self._vpn_net = vpn_net

    @classmethod
    def from_dict(cls, dikt) -> 'VpnIp':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VpnIp of this VpnIp.  # noqa: E501
        :rtype: VpnIp
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this VpnIp.

        A address in a VPN network  # noqa: E501

        :return: The address of this VpnIp.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this VpnIp.

        A address in a VPN network  # noqa: E501

        :param address: The address of this VpnIp.
        :type address: str
        """
        if address is not None and len(address) > 15:
            raise ValueError("Invalid value for `address`, length must be less than or equal to `15`")  # noqa: E501
        if address is not None and not re.search(r'^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$', address):  # noqa: E501
            raise ValueError("Invalid value for `address`, must be a follow pattern or equal to `/^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/`")  # noqa: E501

        self._address = address

    @property
    def vpn_net(self):
        """Gets the vpn_net of this VpnIp.


        :return: The vpn_net of this VpnIp.
        :rtype: VpnNet
        """
        return self._vpn_net

    @vpn_net.setter
    def vpn_net(self, vpn_net):
        """Sets the vpn_net of this VpnIp.


        :param vpn_net: The vpn_net of this VpnIp.
        :type vpn_net: VpnNet
        """

        self._vpn_net = vpn_net
